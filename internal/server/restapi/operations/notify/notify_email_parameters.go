// Code generated by go-swagger; DO NOT EDIT.

package notify

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NotifyEmailMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var NotifyEmailMaxParseMemory int64 = 32 << 20

// NewNotifyEmailParams creates a new NotifyEmailParams object
//
// There are no default values defined in the spec.
func NewNotifyEmailParams() NotifyEmailParams {

	return NotifyEmailParams{}
}

// NotifyEmailParams contains all the bound params for the notify email operation
// typically these are obtained from a http.Request
//
// swagger:parameters notifyEmail
type NotifyEmailParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: formData
	*/
	Attachment io.ReadCloser
	/*Тема сообщения
	  Required: true
	  In: formData
	*/
	Subject string
	/*
	  Required: true
	  In: formData
	*/
	Text io.ReadCloser
	/*Адрес получателя
	  Required: true
	  In: formData
	*/
	To string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewNotifyEmailParams() beforehand.
func (o *NotifyEmailParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(NotifyEmailMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	attachment, attachmentHeader, err := r.FormFile("attachment")
	if err != nil && err != http.ErrMissingFile {
		res = append(res, errors.New(400, "reading file %q failed: %v", "attachment", err))
	} else if err == http.ErrMissingFile {
		// no-op for missing but optional file parameter
	} else if err := o.bindAttachment(attachment, attachmentHeader); err != nil {
		res = append(res, err)
	} else {
		o.Attachment = &runtime.File{Data: attachment, Header: attachmentHeader}
	}

	fdSubject, fdhkSubject, _ := fds.GetOK("subject")
	if err := o.bindSubject(fdSubject, fdhkSubject, route.Formats); err != nil {
		res = append(res, err)
	}

	text, textHeader, err := r.FormFile("text")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "text", err))
	} else if err := o.bindText(text, textHeader); err != nil {
		// Required: true
		res = append(res, err)
	} else {
		o.Text = &runtime.File{Data: text, Header: textHeader}
	}

	fdTo, fdhkTo, _ := fds.GetOK("to")
	if err := o.bindTo(fdTo, fdhkTo, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAttachment binds file parameter Attachment.
//
// The only supported validations on files are MinLength and MaxLength
func (o *NotifyEmailParams) bindAttachment(file multipart.File, header *multipart.FileHeader) error {
	return nil
}

// bindSubject binds and validates parameter Subject from formData.
func (o *NotifyEmailParams) bindSubject(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("subject", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("subject", "formData", raw); err != nil {
		return err
	}
	o.Subject = raw

	return nil
}

// bindText binds file parameter Text.
//
// The only supported validations on files are MinLength and MaxLength
func (o *NotifyEmailParams) bindText(file multipart.File, header *multipart.FileHeader) error {
	return nil
}

// bindTo binds and validates parameter To from formData.
func (o *NotifyEmailParams) bindTo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("to", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("to", "formData", raw); err != nil {
		return err
	}
	o.To = raw

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package notify

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NotifySMSMaxParseMemory sets the maximum size in bytes for
// the multipart form parser for this operation.
//
// The default value is 32 MB.
// The multipart parser stores up to this + 10MB.
var NotifySMSMaxParseMemory int64 = 32 << 20

// NewNotifySMSParams creates a new NotifySMSParams object
//
// There are no default values defined in the spec.
func NewNotifySMSParams() NotifySMSParams {

	return NotifySMSParams{}
}

// NotifySMSParams contains all the bound params for the notify s m s operation
// typically these are obtained from a http.Request
//
// swagger:parameters notifySMS
type NotifySMSParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Текст сообщения
	  Required: true
	  Max Length: 60
	  Min Length: 2
	  In: formData
	*/
	Text string
	/*Телефон получателя
	  Required: true
	  Max Length: 12
	  In: formData
	*/
	To string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewNotifySMSParams() beforehand.
func (o *NotifySMSParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(NotifySMSMaxParseMemory); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdText, fdhkText, _ := fds.GetOK("text")
	if err := o.bindText(fdText, fdhkText, route.Formats); err != nil {
		res = append(res, err)
	}

	fdTo, fdhkTo, _ := fds.GetOK("to")
	if err := o.bindTo(fdTo, fdhkTo, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindText binds and validates parameter Text from formData.
func (o *NotifySMSParams) bindText(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("text", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("text", "formData", raw); err != nil {
		return err
	}
	o.Text = raw

	if err := o.validateText(formats); err != nil {
		return err
	}

	return nil
}

// validateText carries on validations for parameter Text
func (o *NotifySMSParams) validateText(formats strfmt.Registry) error {

	if err := validate.MinLength("text", "formData", o.Text, 2); err != nil {
		return err
	}

	if err := validate.MaxLength("text", "formData", o.Text, 60); err != nil {
		return err
	}

	return nil
}

// bindTo binds and validates parameter To from formData.
func (o *NotifySMSParams) bindTo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("to", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("to", "formData", raw); err != nil {
		return err
	}
	o.To = raw

	if err := o.validateTo(formats); err != nil {
		return err
	}

	return nil
}

// validateTo carries on validations for parameter To
func (o *NotifySMSParams) validateTo(formats strfmt.Registry) error {

	if err := validate.MaxLength("to", "formData", o.To, 12); err != nil {
		return err
	}

	return nil
}
